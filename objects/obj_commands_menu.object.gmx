<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_commands_menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu[0] = "attack";
menu[1] = "abilities";
menu[2] = "items";

space = 32;
mpos = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.charge_bars[global.current_lane].charge_value != 1 {
    visible = false;
} else {
    visible = true;
    var move = 0;
    move -= max(keyboard_check_pressed(vk_up), keyboard_check_pressed(ord("W")), 0);
    move += max(keyboard_check_pressed(vk_down), keyboard_check_pressed(ord("S")), 0);
    
    if (move != 0)
    {
        mpos += move;
        if (mpos &lt; 0) mpos = array_length_1d(menu) - 1;
        if (mpos &gt;= array_length_1d(menu)) mpos = 0;
    }
    
    var pushed;
    pushed = max(keyboard_check_pressed(vk_enter), keyboard_check_released(vk_space), 0);
    if (pushed == 1) scr_menu();
}
    
var ch_hero = 0;
ch_hero += max(keyboard_check_pressed(vk_tab), keyboard_check_pressed(vk_right), 0);
ch_hero -= max(keyboard_check_pressed(vk_left), 0);

if (ch_hero != 0) {
    scr_select_lane((global.current_lane + ch_hero) % 4);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(fnt_commands_menu);
draw_set_color(c_black);

var m;
for (m = 0; m &lt; array_length_1d(menu); m += 1)
{
    draw_text(x + space, y + space + (m * space), string(menu[m]));
}

draw_sprite(spr_menu_selector, 0, x, y + space + (mpos * space));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
