<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_commands_menu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu[0] = "attack";
menu[1] = "abilities";
menu[2] = "items";

space = 32;
mpos = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.current_hero == noone or global.current_hero.charge_bar.value &lt; global.current_hero.charge_bar.max_value {
    visible = false;
} else {
    visible = true;
    var move = 0;
    move -= max(keyboard_check_pressed(vk_up), keyboard_check_pressed(ord("W")), 0);
    move += max(keyboard_check_pressed(vk_down), keyboard_check_pressed(ord("S")), 0);
    
    if move != 0 {
        mpos += move;
        if (mpos &lt; 0) mpos = array_length_1d(menu) - 1;
        if (mpos &gt;= array_length_1d(menu)) mpos = 0;
    }
    
    var pushed;
    pushed = max(keyboard_check_pressed(vk_enter), keyboard_check_released(vk_space), 0);
    if pushed != 0 {
        switch mpos {
            case 0:
            // attack
                var target = ds_list_find_value(global.current_lane.enemies, 0);
                if global.current_hero.charge_bar.value == global.current_hero.charge_bar.max_value {
                    global.current_hero.charge_bar.value = 0;
                    target.health_value -= global.current_hero.damage;
                    if target.health_value &lt; 0 {
                        target.health_value = 0;
                    }
                }
            break;
            case 1:
            // abilities
            break;
            case 2:
            // items
            break;
        }
    }
}
    
var ch_lane = 0;
ch_lane += max(keyboard_check_pressed(vk_tab), keyboard_check_pressed(vk_right), keyboard_check_pressed(ord("E")), 0);
ch_lane -= max(keyboard_check_pressed(vk_left), keyboard_check_pressed(ord("Q")), 0);

if (ch_lane != 0) {
    var new_lane_index = (global.current_lane.index + ch_lane) % instance_number(obj_lane);
    var new_lane = instance_find(obj_lane, new_lane_index);
    var new_hero;
    if ds_list_empty(new_lane.heroes) {
        new_hero = new_lane; // scr_select_hero will detect that a lane was passed
    } else {
        new_hero = ds_list_find_value(new_lane.heroes, 0);
    }
    scr_select_hero(new_hero);
}

var ch_hero = 0;
ch_hero += max(keyboard_check_pressed(ord("D")), 0);
ch_hero -= max(keyboard_check_pressed(ord("A")), 0);

if ch_hero != 0 and ds_list_size(global.current_lane.heroes) &gt; 1 {
    var current_hero_index = ds_list_find_index(global.current_lane.heroes, global.current_hero);
    var next_hero_index = (current_hero_index + 1) % ds_list_size(global.current_lane.heroes);
    scr_select_hero(ds_list_find_value(global.current_lane.heroes, next_hero_index));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y = background_y[global.current_lane.index];

draw_self();

draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(fnt_commands_menu);
draw_set_color(c_black);

var m;
for (m = 0; m &lt; array_length_1d(menu); m += 1)
{
    draw_text(x + space, y + space + (m * space), string(menu[m]));
}

draw_sprite(spr_menu_selector, 0, x, y + space + (mpos * space));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
